// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using DInteractive.Core;

namespace DInteractive.iOS
{
	public partial class ConfirmedServiceController : UIViewController
	{
		readonly OrdersModel ordersModel = (OrdersModel)DependencyInjectionWrapper.Instance.ServiceContainer ().GetService (typeof(OrdersModel));
		readonly UserModel userModel = (UserModel)DependencyInjectionWrapper.Instance.ServiceContainer ().GetService (typeof(UserModel));
		readonly CategoriesModel categoriesModel = (CategoriesModel)DependencyInjectionWrapper.Instance.ServiceContainer ().GetService (typeof(CategoriesModel));


		public ConfirmedServiceController (IntPtr handle) : base (handle)
		{
		}

		public override async void ViewDidAppear(bool animated)
		{
			base.ViewDidAppear (animated);
			try 
			{
				ordersModel.RequestedOrder.Supplier = await userModel.GetUserAsync(ordersModel.RequestedOrder.SupplierId, UserType.SUPPLIER);
				this.lblRanking.Text = "?";
				this.txtSupplerName.Text = ordersModel.RequestedOrder.Supplier.names;
				this.txtSurNames.Text = ordersModel.RequestedOrder.Supplier.surnames;
				this.txtUpplierPhone.Text = ordersModel.RequestedOrder.Supplier.mobile;
				this.txtClickCode.Text = ordersModel.RequestedOrder.ClickCode;
				this.txtState.Text = ordersModel.RequestedOrder.Status + "";
				this.txtPrice.Text = "QuienloPone?";
				this.txtServiceDate.Text = ordersModel.RequestedOrder.GetReservationDate();
				this.txtServiceTime.Text = ordersModel.RequestedOrder.GetReservationTime();

			}
			catch (Exception exc)
			{
				Console.WriteLine("Error relacionado con userModel.GetUserAsync " + exc.Message);
			}

		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			this.NavigationItem.SetHidesBackButton (true, false);
			categoriesModel.SelectedCategory = categoriesModel.GetCategoryById (ordersModel.RequestedOrder.CategoryId);
			categoriesModel.SelectedSubcategory = categoriesModel.GetSubCategoryById (ordersModel.RequestedOrder.SubCategoryId);

			if (categoriesModel.SelectedSubcategory != null)
				lblSubCategory.Text = categoriesModel.SelectedSubcategory.Name;
			else
				lblSubCategory.Text = categoriesModel.GetSubCategoryById (ordersModel.RequestedOrder.SubCategoryId).Name;

			if(categoriesModel.SelectedCategory != null)
				imgCat.Image = UIImage.FromBundle (categoriesModel.SelectedCategory.ImageName);

		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(false);
			ordersModel.IsBusyChanged += OnIsBusyChanged;
		}

		public override void ViewWillDisappear(bool animated)
		{
			base.ViewWillDisappear(false);
			ordersModel.IsBusyChanged -= OnIsBusyChanged;
		}

		void OnIsBusyChanged(object sender, EventArgs e)
		{
				btnCancel.Enabled =
					indicator.Hidden = !ordersModel.IsBusy;
		}

	}
}
