// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using DInteractive.Core;

namespace DInteractive.iOS
{
	public partial class SupplierStartedServiceController : MyViewController
	{

		readonly OrdersModel ordersModel = (OrdersModel)DependencyInjectionWrapper.Instance.ServiceContainer ().GetService (typeof(OrdersModel));
		readonly UserModel userModel = (UserModel)DependencyInjectionWrapper.Instance.ServiceContainer ().GetService (typeof(UserModel));

		public SupplierStartedServiceController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);
		}


		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			this.NavigationItem.SetHidesBackButton (true, false);

			UITapGestureRecognizer labelAcceptTap = new UITapGestureRecognizer (async() => {
				await ordersModel.ChangeRequestedOrderStateAsync(ServiceState.FINALIZADO);
				ordersModel.EndTime = DateTime.Now;
				PerformSegue("OnSupplierFinishService",this);
			});
			lblCancel.UserInteractionEnabled = true;
			lblCancel.AddGestureRecognizer (labelAcceptTap);

			/*UITapGestureRecognizer labelRejectTap = new UITapGestureRecognizer (async() => {
				PerformSegue("OnSupplierNotFinishService",this);
			});
			lblNotCancel.UserInteractionEnabled = true;
			lblNotCancel.AddGestureRecognizer (labelRejectTap);*/

			txtDate.Text = ordersModel.RequestedOrder.GetReservationDate();
			txtUserName.Text = ordersModel.RequestedOrder.User.names;
			txtUserLastName.Text = ordersModel.RequestedOrder.User.surnames;
			txtState.Text = ordersModel.RequestedOrder.Status.ToString ();
			txtClickCode.Text = ordersModel.RequestedOrder.ClickCode;

		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (false);
			ordersModel.IsBusyChanged += OnIsBusyChanged;
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (false);
			ordersModel.IsBusyChanged -= OnIsBusyChanged;
		}

		void OnIsBusyChanged (object sender, EventArgs e)
		{
			lblCancel.Enabled = 
				lblNotCancel.Enabled = 
				indicator.Hidden = !userModel.IsBusy;
		}



	}
}
