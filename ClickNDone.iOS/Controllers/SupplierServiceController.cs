// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using DInteractive.Core;

namespace DInteractive.iOS
{
	public partial class SupplierServiceController : MyViewController
	{
		readonly OrdersModel ordersModel = (OrdersModel)DependencyInjectionWrapper.Instance.ServiceContainer ().GetService (typeof(OrdersModel));
		readonly UserModel userModel = (UserModel)DependencyInjectionWrapper.Instance.ServiceContainer ().GetService (typeof(UserModel));

		public SupplierServiceController (IntPtr handle) : base (handle)
		{
		}

		public override async void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);
			try {

				//TODO - Fix this whe GetUser workis correctly according to the las change
				var requesterUser = await userModel.GetUserAsync (ordersModel.RequestedOrder.UserId, UserType.CONSUMER);
				ordersModel.RequestedOrder.User = requesterUser;

				txtAddress.Text = ordersModel.RequestedOrder.Location;
				txtReference.Text = ordersModel.RequestedOrder.Reference;
				txtDate.Text = ordersModel.RequestedOrder.GetReservationDate();
				txtTime.Text = ordersModel.RequestedOrder.Time;
				txtUserName.Text = ordersModel.RequestedOrder.User.names;
				txtUserLastName.Text = ordersModel.RequestedOrder.User.surnames;

			} catch (Exception exc) {
				Console.WriteLine("Error relacionado con GetUserAsync " + exc.Message);
			}
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			this.NavigationItem.SetHidesBackButton (true, false);

			UITapGestureRecognizer labelAcceptTap = new UITapGestureRecognizer (async() => {
				await ordersModel.ChangeRequestedOrderStateAsync(ServiceState.CONFIRMADO);
				PerformSegue("OnSupplierConfirmService",this);
			});
			lblAcceptService.UserInteractionEnabled = true;
			lblAcceptService.AddGestureRecognizer (labelAcceptTap);

			UITapGestureRecognizer labelRejectTap = new UITapGestureRecognizer (async() => {
				await ordersModel.ChangeRequestedOrderStateAsync(ServiceState.RECHAZADO_PROVEEDOR);
				PerformSegue("OnSupplierRejectService",this);
			});
			lblRejectService.UserInteractionEnabled = true;
			lblRejectService.AddGestureRecognizer (labelRejectTap);

		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (false);
			ordersModel.IsBusyChanged += OnIsBusyOrdersChanged;


		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (false);
			ordersModel.IsBusyChanged -= OnIsBusyOrdersChanged;
		}

		void OnIsBusyChanged (object sender, EventArgs e)
		{
			lblAcceptService.Enabled = 
				lblRejectService.Enabled = 
					indicator.Hidden = !userModel.IsBusy;
		}

		void OnIsBusyOrdersChanged (object sender, EventArgs e)
		{
			lblAcceptService.Enabled = 
				lblRejectService.Enabled = 
					indicator.Hidden = !ordersModel.IsBusy;
		}
	}
}
