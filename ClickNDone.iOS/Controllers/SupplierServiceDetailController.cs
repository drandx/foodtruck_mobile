// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using DInteractive.Core;

namespace DInteractive.iOS
{
	public partial class SupplierServiceDetailController : MyViewController
	{
		readonly OrdersModel ordersModel = (OrdersModel)DependencyInjectionWrapper.Instance.ServiceContainer ().GetService (typeof(OrdersModel));
		readonly UserModel userModel = (UserModel)DependencyInjectionWrapper.Instance.ServiceContainer ().GetService (typeof(UserModel));

		public SupplierServiceDetailController (IntPtr handle) : base (handle)
		{
		}


		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			this.AddKeyboarListeners ();

			btnInitService.TouchUpInside += async(sender, e) =>
			{
				try {

					if(txtClickCode.Text == ordersModel.RequestedOrder.ClickCode)
					{
						await ordersModel.ChangeRequestedOrderStateAsync(ServiceState.ORDEN_INICIADA);
						ordersModel.InitTime = DateTime.Now;
						PerformSegue("OnSupplierInitService",this);
					}

					else
						new UIAlertView("Oops!", "Codigo Click Incorrecto", null, "Ok").Show();

				}
				catch (Exception exc)
				{
					Console.WriteLine("Error relacionado con ordersModel.ChangeRequestedOrderStateAsync " + exc.Message);
				}
			};

		}

		public override async void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);
			try {
				var requesterUser = await userModel.GetUserAsync (ordersModel.RequestedOrder.UserId, UserType.CONSUMER);
				ordersModel.RequestedOrder.User = requesterUser;
				txtDate.Text = ordersModel.RequestedOrder.GetReservationDate();
				txtUserName.Text = ordersModel.RequestedOrder.User.names;
				txtUserLastName.Text = ordersModel.RequestedOrder.User.surnames;
				txtState.Text = ordersModel.RequestedOrder.Status.ToString();

			} catch (Exception exc) {
				Console.WriteLine("Error relacionado con userModel.GetUserAsync " + exc.Message);
			}
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (false);
			ordersModel.IsBusyChanged += OnIsBusyChanged;
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (false);
			ordersModel.IsBusyChanged -= OnIsBusyChanged;
		}

		void OnIsBusyChanged (object sender, EventArgs e)
		{
			btnInitService.Enabled = 
					indicator.Hidden = !userModel.IsBusy;
		}


	}
}
